inv<-solve(data, ...) #to solve inverse value
inv<-Solve(data, ...) #to solve inverse value
inv<-solve(data, ...) #to solve inverse value
source("cachematrix.R")
source("CacheMatrix.R")
f<-makeCacheMatrix(matrix(1:8, 2, 4))
getinv<-funciton(){
inver<-ginv(x)
inver%*%x #to get inverse of matrix
}
library(MASS) #to solve for inverse of both squared and non
library(MASS) #to solve for inverse of both squared and non
library(MASS) #to solve for inverse of both squared and non
setinv<-function(inverse)inv<<-inverse
getinv<-funciton(){
getinv<-funciton() {
inver<-ginv(x)
inver%*%x #to get inverse of matrix
}
inver%*%x #to get inverse of matrix}
getinv<-funciton() {
inver<-ginv(x)
inver%*%x #to get inverse of matrix
}
set<-function(y){
x<<-y
inv<<-NULL
}
library(MASS) #to solve for inverse of both squared and non squared matrices
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL #to set inverse as NULL
set<-function(y){
x<<-y
inv<<-NULL
}
get<-function()x #to get matrix x
setinv<-function(inverse)inv<<-inverse
getinv<-funciton() {
inver<-ginv(x)
inver%*%x #to get inverse of matrix
}
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv<-x$getinv()
if(!is.null(inv)){ #to check if inverse is NULL
message("getting cached data.")
return(inv) #to return inverse value
}
data<-x$get()
inv<-solve(data, ...) #to solve inverse value
x$setinv(inv)
inv
## Return a matrix that is the inverse of 'x'
}
library(MASS) #to solve for inverse of both squared and non squared matrices
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL #to set inverse as NULL
set<-function(y){
x<<-y
inv<<-NULL
}
get<-function()x #to get matrix x
setinv<-function(inverse)inv<<-inverse
getinv<-funciton() {
inver<-ginv(x)
inver%*%x #to get inverse of matrix
}
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv<-x$getinv()
if(!is.null(inv)){ #to check if inverse is NULL
message("getting cached data.")
return(inv) #to return inverse value
}
data<-x$get()
inv<-solve(data, ...) #to solve inverse value
x$setinv(inv)
inv
## Return a matrix that is the inverse of 'x'
}
source('~/01 MAPUA/MATH144 Introduction to Data Science/ProgrammingAssignment2/cachematrix.R')
source("cachematrix.R")
getinv<-funciton(){
inver<-ginv(x)
inver%*%x #to get inverse of matrix
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
library(MASS) #to solve for inverse of both squared and non squared matrices
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL #to set inverse as NULL
set<-function(y){
x<<-y
inv<<-NULL
}
get<-function()x #to get matrix x
setinv<-function(inverse)inv<<-inverse
getinv<-funciton(){
inver<-ginv(x)
inver%*%x #to get inverse of matrix
}
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv<-x$getinv()
if(!is.null(inv)){ #to check if inverse is NULL
message("getting cached data.")
return(inv) #to return inverse value
}
data<-x$get()
inv<-solve(data, ...) #to solve inverse value
x$setinv(inv)
inv
## Return a matrix that is the inverse of 'x'
}
source('~/01 MAPUA/MATH144 Introduction to Data Science/ProgrammingAssignment2/cachematrix.R')
getinv <- function() {
inver<-ginv(x)
inver%*%x #to get inverse of matrix
}
list(set = set, get = get, setinv = setinv, getinv = getinv)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
library(MASS) #to solve for inverse of both squared and non squared matrices
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL #to set inverse as NULL
set<-function(y){
x<<-y
inv<<-NULL
}
get<-function()x #to get matrix x
setinv <- function(inverse) {inv <<- inverse}
getinv <- function() {
inver<-ginv(x)
inver%*%x #to get inverse of matrix
}
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv<-x$getinv()
if(!is.null(inv)){ #to check if inverse is NULL
message("getting cached data.")
return(inv) #to return inverse value
}
data<-x$get()
inv<-solve(data, ...) #to solve inverse value
x$setinv(inv)
inv
## Return a matrix that is the inverse of 'x'
}
f<-makeCacheMatrix(matrix(1:8, 2, 4))
f$get()
f$getinv()
cacheSolve(f)
